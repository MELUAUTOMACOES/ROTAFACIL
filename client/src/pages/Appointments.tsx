import { useState, useEffect, useMemo } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { getAuthHeaders } from "@/lib/auth";
import { apiRequest } from "@/lib/queryClient";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Dialog, DialogContent, DialogTrigger } from "@/components/ui/dialog";
import { useToast } from "@/hooks/use-toast";
import AppointmentForm from "@/components/forms/AppointmentForm";
import { Plus, Calendar, MapPin, Clock, User, Edit, Trash2, Download, Upload, Filter, Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import type { Appointment, Client, Service, Technician, Team } from "@shared/schema";

export default function Appointments() {
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);
  const [isFormOpen, setIsFormOpen] = useState(false);
  const [prefilledData, setPrefilledData] = useState<any>(null);
  
  // Estados para filtros
  const [selectedDate, setSelectedDate] = useState<string>("");
  const [searchTerm, setSearchTerm] = useState<string>("");
  const [selectedService, setSelectedService] = useState<string>("all");
  const [selectedTechnician, setSelectedTechnician] = useState<string>("all");
  const [selectedStatus, setSelectedStatus] = useState<string>("all");
  
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Logs para monitorar uso dos filtros
  useEffect(() => {
    console.log("üîç [FILTER] Filtros aplicados:", {
      selectedDate,
      searchTerm,
      selectedService,
      selectedTechnician,
      selectedStatus
    });
  }, [selectedDate, searchTerm, selectedService, selectedTechnician, selectedStatus]);

  // Verificar par√¢metros da URL ao carregar a p√°gina
  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    const preselected = urlParams.get('preselected');
    
    console.log("üìã [DEBUG] Appointments - Verificando par√¢metros URL:", {
      preselected,
      date: urlParams.get('date'),
      cep: urlParams.get('cep'),
      numero: urlParams.get('numero'),
      serviceId: urlParams.get('serviceId'),
      technicianId: urlParams.get('technicianId'),
      teamId: urlParams.get('teamId'),
      clientId: urlParams.get('clientId')
    });
    
    if (preselected === 'true') {
      const data = {
        date: urlParams.get('date'),
        cep: urlParams.get('cep'),
        numero: urlParams.get('numero'),
        serviceId: urlParams.get('serviceId'),
        technicianId: urlParams.get('technicianId'),
        teamId: urlParams.get('teamId'),
        clientId: urlParams.get('clientId'),
      };
      
      console.log("üìã [DEBUG] Appointments - Dados processados:", data);
      
      // Verificar se todos os campos obrigat√≥rios est√£o presentes
      const hasRequiredFields = data.date && data.cep && data.numero && data.serviceId && 
                               (data.technicianId || data.teamId);
      
      console.log("üìã [DEBUG] Appointments - Campos obrigat√≥rios presentes:", hasRequiredFields);
      
      if (hasRequiredFields) {
        setPrefilledData(data);
        setIsFormOpen(true);
        
        // Limpar par√¢metros da URL
        window.history.replaceState({}, document.title, window.location.pathname);
      }
    }
  }, []);

  const { data: appointments = [], isLoading } = useQuery({
    queryKey: ["/api/appointments"],
    queryFn: async () => {
      const response = await fetch("/api/appointments", {
        headers: getAuthHeaders(),
      });
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      return Array.isArray(data) ? data : [];
    },
  });

  const { data: clients = [] } = useQuery({
    queryKey: ["/api/clients"],
    queryFn: async () => {
      const response = await fetch("/api/clients", {
        headers: getAuthHeaders(),
      });
      return response.json();
    },
  });

  const { data: services = [] } = useQuery({
    queryKey: ["/api/services"],
    queryFn: async () => {
      const response = await fetch("/api/services", {
        headers: getAuthHeaders(),
      });
      return response.json();
    },
  });

  const { data: technicians = [] } = useQuery({
    queryKey: ["/api/technicians"],
    queryFn: async () => {
      const response = await fetch("/api/technicians", {
        headers: getAuthHeaders(),
      });
      return response.json();
    },
  });

  const { data: teams = [] } = useQuery({
    queryKey: ["/api/teams"],
    queryFn: async () => {
      const response = await fetch("/api/teams", {
        headers: getAuthHeaders(),
      });
      return response.json();
    },
  });

  const deleteAppointmentMutation = useMutation({
    mutationFn: async (id: number) => {
      await apiRequest("DELETE", `/api/appointments/${id}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ["/api/appointments"] });
      toast({
        title: "Sucesso",
        description: "Agendamento exclu√≠do com sucesso",
      });
    },
    onError: (error: any) => {
      toast({
        title: "Erro",
        description: error.message || "Erro ao excluir agendamento",
        variant: "destructive",
      });
    },
  });

  const handleEdit = (appointment: Appointment) => {
    setSelectedAppointment(appointment);
    setIsFormOpen(true);
  };

  const handleDelete = async (appointment: Appointment) => {
    if (confirm("Tem certeza que deseja excluir este agendamento?")) {
      deleteAppointmentMutation.mutate(appointment.id);
    }
  };

  const handleFormClose = () => {
    console.log("üßπ [DEBUG] handleFormClose - Limpando formul√°rio");
    console.log("üßπ [DEBUG] handleFormClose - selectedAppointment antes:", selectedAppointment);
    console.log("üßπ [DEBUG] handleFormClose - prefilledData antes:", prefilledData);
    
    setIsFormOpen(false);
    setSelectedAppointment(null);
    setPrefilledData(null);
    
    console.log("üßπ [DEBUG] handleFormClose - Estado limpo - formul√°rio deve abrir vazio na pr√≥xima vez");
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "completed":
        return "bg-green-100 text-green-800";
      case "in_progress":
        return "bg-yellow-100 text-yellow-800";
      case "scheduled":
        return "bg-blue-100 text-blue-800";
      case "cancelled":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case "completed":
        return "Conclu√≠do";
      case "in_progress":
        return "Em Andamento";
      case "scheduled":
        return "Agendado";
      case "cancelled":
        return "Cancelado";
      default:
        return status;
    }
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "urgent":
        return "bg-red-100 text-red-800";
      case "high":
        return "bg-orange-100 text-orange-800";
      case "normal":
        return "bg-gray-100 text-gray-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getPriorityText = (priority: string) => {
    switch (priority) {
      case "urgent":
        return "Urgente";
      case "high":
        return "Alta";
      case "normal":
        return "Normal";
      default:
        return priority;
    }
  };

  const formatDateTime = (dateString: string) => {
    const date = new Date(dateString);
    return {
      date: date.toLocaleDateString('pt-BR'),
      time: date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' })
    };
  };

  const getClient = (clientId: number | null) => clientId ? clients.find((c: Client) => c.id === clientId) : null;
  const getService = (serviceId: number) => services.find((s: Service) => s.id === serviceId);
  const getTechnician = (technicianId: number | null) => technicianId ? technicians.find((t: Technician) => t.id === technicianId) : null;
  const getTeam = (teamId: number | null) => teamId ? teams.find((t: Team) => t.id === teamId) : null;

  // Fun√ß√£o para obter informa√ß√µes do respons√°vel (t√©cnico ou equipe) com logs detalhados
  const getResponsibleInfo = (appointment: Appointment) => {
    if (appointment.technicianId) {
      const technician = getTechnician(appointment.technicianId);
      console.log(`üë§ [DEBUG] Agendamento ${appointment.id} - T√©cnico individual:`, technician?.name, "ID:", appointment.technicianId);
      return {
        type: 'technician' as const,
        name: technician?.name || "T√©cnico n√£o encontrado",
        id: appointment.technicianId,
        displayName: `üë§ ${technician?.name || "T√©cnico n√£o encontrado"}`
      };
    } else if (appointment.teamId) {
      const team = getTeam(appointment.teamId);
      console.log(`üë• [DEBUG] Agendamento ${appointment.id} - Equipe:`, team?.name, "ID:", appointment.teamId);
      return {
        type: 'team' as const,
        name: team?.name || "Equipe n√£o encontrada",
        id: appointment.teamId,
        displayName: `üë• ${team?.name || "Equipe n√£o encontrada"}`
      };
    }
    console.log(`‚ùå [DEBUG] Agendamento ${appointment.id} - Nenhum respons√°vel atribu√≠do`);
    return {
      type: 'none' as const,
      name: "Respons√°vel n√£o atribu√≠do",
      id: null,
      displayName: "‚ùå Respons√°vel n√£o atribu√≠do"
    };
  };

  // L√≥gica de filtragem dos agendamentos
  const filteredAppointments = useMemo(() => {
    if (!appointments || appointments.length === 0) return [];
    
    console.log("üîç [FILTER] Aplicando filtros nos agendamentos...");
    console.log("üîç [FILTER] Total de agendamentos:", appointments.length);
    
    const filtered = appointments.filter((apt: Appointment) => {
      // Filter by date
      if (selectedDate) {
        const aptDate = new Date(apt.scheduledDate).toLocaleDateString('en-CA'); // YYYY-MM-DD format
        console.log(`üîç [FILTER] Comparando datas - selectedDate: ${selectedDate}, aptDate: ${aptDate}`);
        if (aptDate !== selectedDate) {
          console.log(`üîç [FILTER] Agendamento ${apt.id} filtrado por data`);
          return false;
        }
      }

      // Filter by client name (search term)
      if (searchTerm) {
        const client = getClient(apt.clientId);
        const clientName = client?.name?.toLowerCase() || '';
        const searchLower = searchTerm.toLowerCase();
        console.log(`üîç [FILTER] Pesquisando "${searchTerm}" em "${clientName}"`);
        if (!clientName.includes(searchLower)) {
          console.log(`üîç [FILTER] Agendamento ${apt.id} filtrado por busca de cliente`);
          return false;
        }
      }

      // Filter by service
      if (selectedService && selectedService !== "all") {
        console.log(`üîç [FILTER] Filtro de servi√ßo aplicado - selectedService: ${selectedService}, apt.serviceId: ${apt.serviceId}`);
        if (apt.serviceId.toString() !== selectedService) {
          console.log(`üîç [FILTER] Agendamento ${apt.id} filtrado por servi√ßo`);
          return false;
        }
      }

      // Filter by technician/team
      if (selectedTechnician && selectedTechnician !== "all") {
        console.log(`üîç [FILTER] Filtro de t√©cnico/equipe aplicado - selectedTechnician: ${selectedTechnician}`);
        
        // Verificar se √© um t√©cnico individual
        const technician = getTechnician(apt.technicianId);
        const isMatchingTechnician = technician?.id.toString() === selectedTechnician;
        
        // Verificar se √© uma equipe (o valor vem como "team-{id}")
        const team = teams.find((t: any) => t.id === apt.teamId);
        const isMatchingTeam = team && selectedTechnician === `team-${team.id}`;
        
        console.log(`üîç [FILTER] isMatchingTechnician: ${isMatchingTechnician}, isMatchingTeam: ${isMatchingTeam}, team:`, team?.name);
        
        if (!isMatchingTechnician && !isMatchingTeam) {
          console.log(`üîç [FILTER] Agendamento ${apt.id} filtrado por t√©cnico/equipe`);
          return false;
        }
      }

      // Filter by status
      if (selectedStatus && selectedStatus !== "all") {
        console.log(`üîç [FILTER] Filtro de status aplicado - selectedStatus: ${selectedStatus}, apt.status: ${apt.status}`);
        if (apt.status !== selectedStatus) {
          console.log(`üîç [FILTER] Agendamento ${apt.id} filtrado por status`);
          return false;
        }
      }

      return true;
    });

    console.log(`üîç [FILTER] Resultado da filtragem: ${filtered.length} de ${appointments.length} agendamentos`);
    return filtered;
  }, [appointments, selectedDate, searchTerm, selectedService, selectedTechnician, selectedStatus, clients, services, technicians, teams]);

  const importCSVMutation = useMutation({
    mutationFn: async (appointments: any[]) => {
      const response = await apiRequest("POST", "/api/appointments/import", { appointments });
      return response.json();
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ["/api/appointments"] });
      queryClient.invalidateQueries({ queryKey: ["/api/clients"] });
      
      // Log detalhado dos resultados do backend
      console.group("üìä RESULTADO DA IMPORTA√á√ÉO NO BACKEND");
      console.log(`‚úÖ Sucessos: ${data.success}`);
      console.log(`‚ùå Erros: ${data.errors}`);
      
      if (data.detailedErrors && data.detailedErrors.length > 0) {
        console.log("\nüìã Erros detalhados do servidor:");
        data.detailedErrors.forEach((error: string, index: number) => {
          console.log(`   ${index + 1}. ${error}`);
        });
      }
      
      if (data.processedItems) {
        console.log(`\nüìà Itens processados: ${data.processedItems.length}`);
        const successItems = data.processedItems.filter((item: any) => item.status === 'success');
        const errorItems = data.processedItems.filter((item: any) => item.status === 'error');
        console.log(`   ‚Ä¢ Sucessos: ${successItems.length}`);
        console.log(`   ‚Ä¢ Erros: ${errorItems.length}`);
      }
      console.groupEnd();
      
      // Toast com resultado
      if (data.errors > 0) {
        const errorMessage = data.detailedErrors ? 
          data.detailedErrors.slice(0, 2).join('\n') + 
          (data.detailedErrors.length > 2 ? `\n... e mais ${data.detailedErrors.length - 2} erros` : '') : 
          `${data.errors} erros encontrados`;
          
        toast({
          title: `Importa√ß√£o parcial: ${data.success} sucessos, ${data.errors} erros`,
          description: errorMessage,
          variant: "destructive",
        });
        
        // Gerar relat√≥rio de erros do backend se houver
        if (data.detailedErrors && data.detailedErrors.length > 0) {
          const backendErrorReport = [
            "RELAT√ìRIO DE ERROS - PROCESSAMENTO NO SERVIDOR",
            "=" + "=".repeat(50),
            "",
            `Data/Hora: ${new Date().toLocaleString('pt-BR')}`,
            "",
            "RESUMO:",
            "-".repeat(20),
            `Total processado: ${data.success + data.errors}`,
            `Sucessos: ${data.success}`,
            `Erros: ${data.errors}`,
            `Taxa de sucesso: ${((data.success / (data.success + data.errors)) * 100).toFixed(1)}%`,
            "",
            "ERROS DO SERVIDOR:",
            "-".repeat(40),
            ...data.detailedErrors.map((error: string, index: number) => `${index + 1}. ${error}`),
          ].join('\n');

          const backendLogBlob = new Blob([backendErrorReport], { type: "text/plain;charset=utf-8;" });
          const backendLogLink = document.createElement("a");
          const backendLogUrl = URL.createObjectURL(backendLogBlob);
          backendLogLink.setAttribute("href", backendLogUrl);
          backendLogLink.setAttribute("download", `relatorio_servidor_${new Date().toISOString().split('T')[0]}_${new Date().toTimeString().split(' ')[0].replace(/:/g, '')}.txt`);
          backendLogLink.style.visibility = "hidden";
          document.body.appendChild(backendLogLink);
          
          setTimeout(() => {
            if (confirm("Deseja baixar o relat√≥rio de erros do servidor?")) {
              backendLogLink.click();
            }
            document.body.removeChild(backendLogLink);
          }, 1500);
        }
      } else {
        toast({
          title: "Sucesso",
          description: `${data.success} agendamentos importados com sucesso!`,
        });
      }
    },
    onError: (error: any) => {
      console.error("‚ùå Erro na comunica√ß√£o com o servidor:", error);
      toast({
        title: "Erro de comunica√ß√£o",
        description: error.message || "Erro ao conectar com o servidor",
        variant: "destructive",
      });
    },
  });

  const handleImportCSV = () => {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = '.csv';
    input.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (event) => {
          try {
            const csv = event.target?.result as string;
            const lines = csv.split('\n').filter(line => line.trim());
            
            if (lines.length < 2) {
              toast({
                title: "Erro",
                description: "Arquivo CSV deve conter pelo menos uma linha de dados",
                variant: "destructive",
              });
              return;
            }

            const headers = lines[0].split(',').map(h => h.replace(/"/g, '').trim());
            const appointmentsToImport = [];
            const errors = [];

            console.log("üìã [CSV IMPORT] Iniciando importa√ß√£o de agendamentos...");
            console.log("üìã [CSV IMPORT] Campos reconhecidos:", headers);
            console.log("üìã [CSV IMPORT] T√©cnicos dispon√≠veis:", technicians.map((t: Technician) => t.name));
            console.log("üìã [CSV IMPORT] Equipes dispon√≠veis:", teams.map((t: Team) => t.name));

            for (let i = 1; i < lines.length; i++) {
              const values = lines[i].split(',').map(v => v.replace(/"/g, '').trim());
              
              if (values.length < headers.length) continue;

              const clientName = values[0];
              const cpfCliente = values[1];
              const serviceName = values[5];
              const technicianName = values[6];
              const dateTime = values[7];
              const cep = values[10];
              const bairro = values[11]; // NOVO
              const cidade = values[12]; // NOVO
              const logradouro = values[13];
              const numero = values[14];
              const complemento = values[15] || "";
              const notes = values[16] || "";


              console.log(`üìã [CSV IMPORT] Linha ${i + 1}: Cliente=${clientName}, CPF=${cpfCliente}`);

              // Encontrar cliente pelo CPF (priorit√°rio) ou nome (fallback) ANTES da valida√ß√£o
              let client = null;
              let clientData = null;
              let finalClientName = clientName;
              let finalCep = cep;
              let finalLogradouro = logradouro;
              let finalNumero = numero;
              
              if (cpfCliente) {
                // Buscar cliente pelo CPF primeiro
                client = clients.find((c: Client) => c.cpf === cpfCliente);
                
                if (client) {
                  console.log(`‚úÖ [CSV IMPORT] Cliente encontrado pelo CPF ${cpfCliente}: ${client.name}`);
                  console.log(`üìã [CSV IMPORT] Usando dados do cliente cadastrado, ignorando dados do CSV`);
                  
                  // Usar dados do cliente cadastrado
                  finalClientName = client.name;
                  finalCep = client.cep;
                  finalLogradouro = client.logradouro;
                  finalNumero = client.numero;
                } else {
                  console.log(`üîç [CSV IMPORT] CPF ${cpfCliente} n√£o encontrado, criando novo cliente`);
                }
              }
              
              if (!client && clientName) {
                // Se n√£o encontrou pelo CPF, tentar por nome como fallback
                client = clients.find((c: Client) => c.name.toLowerCase() === clientName.toLowerCase());
                
                if (client) {
                  console.log(`‚ö†Ô∏è [CSV IMPORT] Cliente encontrado pelo nome: ${client.name} (sem CPF fornecido)`);
                  // Usar dados do cliente cadastrado
                  finalClientName = client.name;
                  finalCep = client.cep;
                  finalLogradouro = client.logradouro;
                  finalNumero = client.numero;
                }
              }

              // Validar campos obrigat√≥rios AP√ìS puxar dados do cliente
              const validationErrors = [];
              const phone1 = values[3];
              
              // Validar campos obrigat√≥rios (agora usando dados finais)
              if (!finalClientName) validationErrors.push("Cliente n√£o identificado (forne√ßa nome ou CPF v√°lido)");
              if (!serviceName) validationErrors.push("Servi√ßo (coluna 6) est√° vazio");
              if (!dateTime) validationErrors.push("Data/Hora (coluna 8) est√° vazia");
              if (!finalCep) validationErrors.push("CEP n√£o dispon√≠vel (cliente n√£o cadastrado)");
              if (!finalNumero) validationErrors.push("N√∫mero n√£o dispon√≠vel (cliente n√£o cadastrado)");
              
              // Validar formato do CEP
              if (finalCep && !/^\d{5}-?\d{3}$/.test(finalCep)) {
                validationErrors.push(`CEP "${finalCep}" inv√°lido (formato esperado: XXXXX-XXX)`);
              }
              
              // Validar se o n√∫mero √© num√©rico
              if (finalNumero && isNaN(Number(finalNumero))) {
                validationErrors.push(`N√∫mero "${finalNumero}" deve ser num√©rico`);
              }
              
              if (validationErrors.length > 0) {
                errors.push(`Linha ${i + 1}: ${validationErrors.join("; ")}`);
                continue;
              }
              
              if (!client) {
                // Preparar dados do cliente para cria√ß√£o autom√°tica
                 clientData = {
                  name: finalClientName,
                  cpf: cpfCliente || "",
                  email: values[2] || "",
                  phone1: phone1 || "",
                  phone2: values[4] || "",
                  cep: finalCep,
                  bairro: bairro || "",
                  cidade: cidade || "",
                  logradouro: finalLogradouro,
                  numero: finalNumero,
                  complemento: complemento,
                  observacoes: `Cliente criado automaticamente via importa√ß√£o CSV em ${new Date().toLocaleString('pt-BR')}`
                };
                console.log(`üÜï [CSV IMPORT] Preparando cria√ß√£o de novo cliente: ${finalClientName}`);
              }

              // Encontrar servi√ßo
              const service = services.find((s: Service) => s.name.toLowerCase() === serviceName.toLowerCase());
              if (!service) {
                errors.push(`Linha ${i + 1}: Servi√ßo "${serviceName}" n√£o encontrado`);
                continue;
              }

              // Encontrar t√©cnico ou equipe
              let technician = null;
              let team = null;
              
              if (technicianName) {
                // Primeiro, procurar por t√©cnico individual
                technician = technicians.find((t: Technician) => t.name.toLowerCase() === technicianName.toLowerCase());
                
                if (technician) {
                  console.log(`üë§ [CSV IMPORT] T√©cnico encontrado: ${technician.name}`);
                } else {
                  // Se n√£o encontrou t√©cnico, procurar por equipe
                  team = teams.find((team: Team) => team.name.toLowerCase() === technicianName.toLowerCase());
                  
                  if (team) {
                    console.log(`üë• [CSV IMPORT] Equipe encontrada: ${team.name}`);
                  } else {
                    console.log(`‚ö†Ô∏è [CSV IMPORT] T√©cnico/Equipe "${technicianName}" n√£o encontrado`);
                  }
                }
              }

              // Validar e normalizar prioridade
              let normalizedPriority = "normal";
              const priorityValue = values[9];
              if (priorityValue) {
                const lowerPriority = priorityValue.toLowerCase().trim();
                if (lowerPriority === "normal") {
                  normalizedPriority = "normal";
                } else if (lowerPriority === "alta" || lowerPriority === "high") {
                  normalizedPriority = "high";
                } else if (lowerPriority === "urgente" || lowerPriority === "urgent") {
                  normalizedPriority = "urgent";
                } else {
                  errors.push(`Linha ${i + 1}: Prioridade "${priorityValue}" inv√°lida. Use: Normal, Alta ou Urgente`);
                  continue;
                }
              }

              // Validar e converter data com m√∫ltiplos formatos
              let scheduledDate;
              try {
                // Tentar diferentes formatos de data
                let dateObj;
                
                // Formato ISO (YYYY-MM-DD HH:MM:SS)
                if (/^\d{4}-\d{2}-\d{2}/.test(dateTime)) {
                  dateObj = new Date(dateTime);
                }
                // Formato brasileiro (DD/MM/YYYY HH:MM)
                else if (/^\d{2}\/\d{2}\/\d{4}/.test(dateTime)) {
                  const [datePart, timePart = "00:00"] = dateTime.split(" ");
                  const [day, month, year] = datePart.split("/");
                  dateObj = new Date(`${year}-${month}-${day} ${timePart}`);
                }
                // Formato americano (MM/DD/YYYY HH:MM)
                else if (/^\d{1,2}\/\d{1,2}\/\d{4}/.test(dateTime)) {
                  dateObj = new Date(dateTime);
                }
                else {
                  dateObj = new Date(dateTime);
                }
                
                if (isNaN(dateObj.getTime())) {
                  throw new Error("Data inv√°lida");
                }
                
                // Verificar se a data n√£o √© muito antiga (antes de 2020) ou muito futura (depois de 2030)
                const year = dateObj.getFullYear();
                if (year < 2020 || year > 2030) {
                  errors.push(`Linha ${i + 1}: Data "${dateTime}" fora do intervalo v√°lido (2020-2030)`);
                  continue;
                }
                
                scheduledDate = dateObj.toISOString();
              } catch {
                errors.push(`Linha ${i + 1}: Data/hora "${dateTime}" inv√°lida. Formatos aceitos: YYYY-MM-DD HH:MM, DD/MM/YYYY HH:MM`);
                continue;
              }

              // Mapear status em portugu√™s para valores do sistema
              let finalStatus = "scheduled"; // padr√£o
              const statusInput = (values[8] || "").trim();
              
              console.log(`üîÑ [CSV IMPORT] Status recebido da linha ${i + 1}: "${statusInput}"`);
              
              if (statusInput) {
                const statusLower = statusInput.toLowerCase()
                  .normalize('NFD')
                  .replace(/[\u0300-\u036f]/g, ''); // remove acentos
                
                const statusMap: { [key: string]: string } = {
                  'agendado': 'scheduled',
                  'em andamento': 'in_progress', 
                  'em-andamento': 'in_progress',
                  'emandamento': 'in_progress',
                  'concluido': 'completed',
                  'conclu√≠do': 'completed',
                  'cancelado': 'cancelled',
                  // Manter compatibilidade com ingl√™s
                  'scheduled': 'scheduled',
                  'in_progress': 'in_progress',
                  'completed': 'completed',
                  'cancelled': 'cancelled'
                };
                
                if (statusMap[statusLower]) {
                  finalStatus = statusMap[statusLower];
                  console.log(`‚úÖ [CSV IMPORT] Status "${statusInput}" mapeado para: ${finalStatus}`);
                } else {
                  errors.push(`Linha ${i + 1}: Status "${statusInput}" inv√°lido. Valores aceitos: Agendado, Em Andamento, Conclu√≠do, Cancelado`);
                  console.log(`‚ùå [CSV IMPORT] Status inv√°lido na linha ${i + 1}: "${statusInput}"`);
                  continue;
                }
              }

              const appointmentData = {
                clientId: client?.id || null,
                clientData: clientData,
                serviceId: service.id,
                technicianId: technician?.id || null,
                teamId: team?.id || null,
                scheduledDate,
                status: finalStatus,
                priority: normalizedPriority,
                cep: finalCep,
                bairro: client ? client.bairro : (bairro || ""),
                cidade: client ? client.cidade : (cidade || ""),
                logradouro: finalLogradouro,
                numero: finalNumero,
                complemento,
                notes
              };
              
              console.log(`üìã [CSV IMPORT] Agendamento preparado - Linha ${i + 1}:`, {
                technicianId: appointmentData.technicianId,
                teamId: appointmentData.teamId,
                serviceId: appointmentData.serviceId,
                clientId: appointmentData.clientId
              });
              
              appointmentsToImport.push(appointmentData);
            }

            if (errors.length > 0) {
              // Criar um relat√≥rio detalhado de erros
              const errorReport = {
                totalLines: lines.length - 1,
                validAppointments: appointmentsToImport.length,
                errorCount: errors.length,
                errors: errors
              };

              // Mostrar primeiros 3 erros no toast
              const shortErrorMessage = errors.slice(0, 3).join('\n') + 
                (errors.length > 3 ? `\n... e mais ${errors.length - 3} erros` : '');
              
              toast({
                title: `${errors.length} erros encontrados na importa√ß√£o`,
                description: shortErrorMessage,
                variant: "destructive",
              });
              
              // Log detalhado no console
              console.group("üìã RELAT√ìRIO DETALHADO DE IMPORTA√á√ÉO CSV");
              console.log(`üìä Resumo:`);
              console.log(`   ‚Ä¢ Total de linhas processadas: ${errorReport.totalLines}`);
              console.log(`   ‚Ä¢ Agendamentos v√°lidos: ${errorReport.validAppointments}`);
              console.log(`   ‚Ä¢ Erros encontrados: ${errorReport.errorCount}`);
              console.log(`   ‚Ä¢ Taxa de sucesso: ${((errorReport.validAppointments / errorReport.totalLines) * 100).toFixed(1)}%`);
              console.log("\nüìù LISTA COMPLETA DE ERROS:");
              errorReport.errors.forEach((error, index) => {
                console.log(`   ${index + 1}. ${error}`);
              });
              console.log("\nüí° DICAS PARA CORRE√á√ÉO:");
              console.log("   ‚Ä¢ Verifique se os nomes de clientes, servi√ßos e t√©cnicos est√£o exatamente como cadastrados");
              console.log("   ‚Ä¢ Formato de data aceito: YYYY-MM-DD HH:MM:SS ou DD/MM/YYYY HH:MM");
              console.log("   ‚Ä¢ CEP deve estar no formato XXXXX-XXX");
              console.log("   ‚Ä¢ Campos obrigat√≥rios n√£o podem estar vazios");
              console.log("\nüìã ORDEM DOS CAMPOS NO CSV:");
              console.log("   1. Cliente | 2. CPF Cliente | 3. Email Cliente | 4. Telefone 1 | 5. Telefone 2");
              console.log("   6. Servi√ßo | 7. T√©cnico | 8. Data/Hora | 9. Status | 10. Prioridade");
              console.log("   11. CEP | 12. Logradouro | 13. N√∫mero | 14. Complemento | 15. Observa√ß√µes");
              console.groupEnd();

              // Criar arquivo de log para download
              const logContent = [
                "RELAT√ìRIO DE ERROS - IMPORTA√á√ÉO CSV",
                "=" + "=".repeat(40),
                "",
                `Data/Hora: ${new Date().toLocaleString('pt-BR')}`,
                `Arquivo processado: ${file.name}`,
                "",
                "RESUMO:",
                `-".repeat(20)`,
                `Total de linhas: ${errorReport.totalLines}`,
                `Agendamentos v√°lidos: ${errorReport.validAppointments}`,
                `Erros encontrados: ${errorReport.errorCount}`,
                `Taxa de sucesso: ${((errorReport.validAppointments / errorReport.totalLines) * 100).toFixed(1)}%`,
                "",
                "ERROS DETALHADOS:",
                "-".repeat(40),
                ...errorReport.errors.map((error, index) => `${index + 1}. ${error}`),
                "",
                "DICAS PARA CORRE√á√ÉO:",
                "-".repeat(40),
                "‚Ä¢ Verifique se os nomes de clientes, servi√ßos e t√©cnicos est√£o exatamente como cadastrados no sistema",
                "‚Ä¢ Formato de data aceito: YYYY-MM-DD HH:MM:SS ou DD/MM/YYYY HH:MM",
                "‚Ä¢ CEP deve estar no formato XXXXX-XXX",
                "‚Ä¢ Campos obrigat√≥rios n√£o podem estar vazios",
                "‚Ä¢ Use apenas caracteres v√°lidos (evite caracteres especiais nos nomes)",
                "",
                "ORDEM DOS CAMPOS NO CSV:",
                "-".repeat(40),
                "1. Cliente | 2. CPF Cliente | 3. Email Cliente | 4. Telefone 1 | 5. Telefone 2",
                "6. Servi√ßo | 7. T√©cnico | 8. Data/Hora | 9. Status | 10. Prioridade", 
                "11. CEP | 12. Logradouro | 13. N√∫mero | 14. Complemento | 15. Observa√ß√µes",
                "",
                "COMPORTAMENTO INTELIGENTE DE CPF:",
                "-".repeat(40),
                "‚Ä¢ Se o CPF do cliente j√° estiver cadastrado, os dados do cliente ser√£o puxados automaticamente",
                "‚Ä¢ Neste caso, os dados do CSV (nome, telefone, endere√ßo) ser√£o ignorados para esse cliente",
                "‚Ä¢ Isso garante consist√™ncia com os dados j√° cadastrados no sistema",
                "",
                "OBSERVA√á√ÉO: Use o bot√£o 'Baixar CSV Modelo' para obter um arquivo com a estrutura correta."
              ].join('\n');

              const logBlob = new Blob([logContent], { type: "text/plain;charset=utf-8;" });
              const logLink = document.createElement("a");
              const logUrl = URL.createObjectURL(logBlob);
              logLink.setAttribute("href", logUrl);
              logLink.setAttribute("download", `relatorio_erros_${new Date().toISOString().split('T')[0]}_${new Date().toTimeString().split(' ')[0].replace(/:/g, '')}.txt`);
              logLink.style.visibility = "hidden";
              document.body.appendChild(logLink);
              
              // Perguntar se o usu√°rio quer baixar o relat√≥rio
              setTimeout(() => {
                if (confirm("Deseja baixar um relat√≥rio detalhado dos erros encontrados?")) {
                  logLink.click();
                }
                document.body.removeChild(logLink);
              }, 1000);
            }

            if (appointmentsToImport.length > 0) {
              importCSVMutation.mutate(appointmentsToImport);
            } else {
              toast({
                title: "Erro",
                description: "Nenhum agendamento v√°lido encontrado no arquivo",
                variant: "destructive",
              });
            }

          } catch (error) {
            toast({
              title: "Erro",
              description: "Erro ao processar arquivo CSV",
              variant: "destructive",
            });
          }
        };
        reader.readAsText(file);
      }
    };
    input.click();
  };

  const downloadCSVTemplate = () => {
    const templateHeaders = [
      "Cliente",
      "CPF Cliente", 
      "Email Cliente",
      "Telefone 1",
      "Telefone 2", 
      "Servi√ßo",
      "T√©cnico",
      "Data/Hora",
      "Status",
      "Prioridade",
      "CEP",
      "Bairro",      // NOVO
      "Cidade",      // NOVO
      "Logradouro", 
      "N√∫mero",
      "Complemento",
      "Observa√ß√µes"
    ];

    const exampleRow = [
      "Jo√£o Silva",
      "123.456.789-01",
      "joao@email.com", 
      "(11) 99999-9999",
      "(11) 88888-8888",
      "Instala√ß√£o",
      "Carlos T√©cnico",
      "2024-12-25 14:30",
      "Agendado",
      "normal", 
      "01234-567",
      "Port√£o",     // EXEMPLO
      "Curitiba",   // EXEMPLO
      "Rua das Flores",
      "123",
      "Apto 45",
      "Cliente preferencial"
    ];

    const csvContent = [templateHeaders, exampleRow]
      .map(row => row.map(field => `"${field}"`).join(","))
      .join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", "modelo_importacao_agendamentos.csv");
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    toast({
      title: "Modelo baixado",
      description: "Use este arquivo como base para importar seus agendamentos",
    });
  };


  const exportToCSV = () => {
    if (appointments.length === 0) {
      toast({
        title: "Aviso",
        description: "N√£o h√° agendamentos para exportar",
        variant: "destructive",
      });
      return;
    }

    const csvHeaders = [
    "ID",
    "Cliente",
    "Email Cliente",
    "Telefone 1",
    "Telefone 2",
    "Servi√ßo",
    "T√©cnico",
    "Data/Hora",
    "Status",
    "Prioridade",
    "CEP",
    "Bairro",         // NOVO
    "Cidade",         // NOVO
    "Logradouro",
    "N√∫mero",
    "Complemento",
    "Observa√ß√µes"
  ];

  const csvData = appointments.map((appointment: Appointment) => {
    const client = getClient(appointment.clientId);
    const service = getService(appointment.serviceId);
    const technician = getTechnician(appointment.technicianId);
    const { date, time } = formatDateTime(appointment.scheduledDate.toString());

    return [
      appointment.id,
      client?.name || "Cliente n√£o encontrado",
      client?.email || "",
      client?.phone1 || "",
      client?.phone2 || "",
      service?.name || "Servi√ßo n√£o encontrado",
      technician?.name || "T√©cnico n√£o encontrado",
      `${date} ${time}`,
      getStatusText(appointment.status),
      getPriorityText(appointment.priority),
      appointment.cep,
      appointment.bairro || "",       // NOVO
      appointment.cidade || "",       // NOVO
      appointment.logradouro,
      appointment.numero,
      appointment.complemento || "",
      appointment.notes || ""
    ];
  });

    const csvContent = [csvHeaders, ...csvData]
      .map((row: any[]) => row.map((field: any) => `"${field}"`).join(","))
      .join("\n");

    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const link = document.createElement("a");
    const url = URL.createObjectURL(blob);
    link.setAttribute("href", url);
    link.setAttribute("download", `agendamentos_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);

    toast({
      title: "Sucesso",
      description: "Agendamentos exportados com sucesso",
    });
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-burnt-yellow"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Agendamentos</h1>
          <p className="text-gray-600">Gerencie todos os seus agendamentos</p>
        </div>
        
        <div className="flex items-center gap-3">
          <Button
            variant="ghost"
            onClick={downloadCSVTemplate}
            className="text-xs text-blue-500 hover:text-blue-700 hover:bg-blue-50"
          >
            Baixar CSV Modelo
          </Button>
          
          <Button
            variant="outline"
            onClick={handleImportCSV}
            className="border-blue-600 text-blue-600 hover:bg-blue-50"
          >
            <Upload className="h-4 w-4 mr-2" />
            Importar CSV
          </Button>
          
          <Button
            variant="outline"
            onClick={exportToCSV}
            className="border-burnt-yellow text-burnt-yellow hover:bg-burnt-yellow hover:text-white"
          >
            <Download className="h-4 w-4 mr-2" />
            Exportar CSV
          </Button>
          
          <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
            <DialogTrigger asChild>
              <Button 
                className="bg-burnt-yellow hover:bg-burnt-yellow-dark text-white"
                onClick={() => {
                  console.log("üÜï [DEBUG] Novo Agendamento - Bot√£o clicado");
                  console.log("üÜï [DEBUG] Novo Agendamento - Limpando selectedAppointment e prefilledData");
                  setSelectedAppointment(null);
                  setPrefilledData(null);
                }}
              >
                <Plus className="h-4 w-4 mr-2" />
                Novo Agendamento
              </Button>
            </DialogTrigger>
            <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
              <AppointmentForm
                appointment={selectedAppointment}
                onClose={handleFormClose}
                clients={clients}
                services={services}
                technicians={technicians}
                teams={teams}
                prefilledData={prefilledData}
              />
            </DialogContent>
          </Dialog>
        </div>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center">
            <Filter className="h-5 w-5 mr-2" />
            Filtros
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            <div>
              <label className="text-sm font-medium mb-2 block">Data</label>
              <Input
                type="date"
                value={selectedDate}
                onChange={(e) => {
                  console.log("üîç [FILTER] Data alterada:", e.target.value);
                  setSelectedDate(e.target.value);
                }}
                className="w-full"
              />
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Buscar Cliente</label>
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="Nome do cliente..."
                  value={searchTerm}
                  onChange={(e) => {
                    console.log("üîç [FILTER] Busca alterada:", e.target.value);
                    setSearchTerm(e.target.value);
                  }}
                  className="pl-10"
                />
              </div>
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Servi√ßo</label>
              <Select value={selectedService} onValueChange={(value) => {
                console.log("üîç [FILTER] Servi√ßo alterado:", value);
                setSelectedService(value);
              }}>
                <SelectTrigger>
                  <SelectValue placeholder="Todos os servi√ßos" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todos os servi√ßos</SelectItem>
                  {services.map((service: Service) => (
                    <SelectItem key={service.id} value={service.id.toString()}>
                      {service.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">T√©cnicos/Equipes</label>
              <Select value={selectedTechnician} onValueChange={(value) => {
                console.log("üîç [FILTER] T√©cnico/Equipe alterado:", value);
                setSelectedTechnician(value);
              }}>
                <SelectTrigger>
                  <SelectValue placeholder="Todos os t√©cnicos e equipes" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todos os t√©cnicos e equipes</SelectItem>
                  {technicians.map((technician: Technician) => (
                    <SelectItem key={`tech-${technician.id}`} value={technician.id.toString()}>
                      üë§ {technician.name}
                    </SelectItem>
                  ))}
                  {teams.map((team: any) => (
                    <SelectItem key={`team-${team.id}`} value={`team-${team.id}`}>
                      üë• {team.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div>
              <label className="text-sm font-medium mb-2 block">Status</label>
              <Select value={selectedStatus} onValueChange={(value) => {
                console.log("üîç [FILTER] Status alterado:", value);
                setSelectedStatus(value);
              }}>
                <SelectTrigger>
                  <SelectValue placeholder="Todos os status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">Todos os status</SelectItem>
                  <SelectItem value="scheduled">Agendado</SelectItem>
                  <SelectItem value="in_progress">Em Andamento</SelectItem>
                  <SelectItem value="completed">Conclu√≠do</SelectItem>
                  <SelectItem value="cancelled">Cancelado</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            {/* Bot√£o para limpar filtros */}
            <div className="col-span-full pt-4 border-t border-gray-100">
              <Button 
                onClick={() => {
                  console.log("üîç [FILTER] Limpando todos os filtros");
                  setSelectedDate("");
                  setSearchTerm("");
                  setSelectedService("all");
                  setSelectedTechnician("all");
                  setSelectedStatus("all");
                }}
                variant="outline"
                className="flex-1 sm:flex-none"
                type="button"
              >
                Limpar Filtros
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Appointments List */}
      {filteredAppointments.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Calendar className="h-12 w-12 text-gray-400 mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {appointments.length === 0 ? "Nenhum agendamento encontrado" : "Nenhum agendamento encontrado com os filtros aplicados"}
            </h3>
            <p className="text-gray-600 text-center mb-6">
              {appointments.length === 0 
                ? "Comece criando seu primeiro agendamento para organizar seus atendimentos t√©cnicos."
                : "Tente ajustar os filtros ou limpar todos os filtros para ver mais agendamentos."
              }
            </p>
            <Dialog open={isFormOpen} onOpenChange={setIsFormOpen}>
              <DialogTrigger asChild>
                <Button 
                  className="bg-burnt-yellow hover:bg-burnt-yellow-dark text-white"
                  onClick={() => setPrefilledData(null)} // Limpar dados pr√©-preenchidos ao clicar diretamente
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Criar Primeiro Agendamento
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
                <AppointmentForm
                  appointment={selectedAppointment}
                  onClose={handleFormClose}
                  clients={clients}
                  services={services}
                  technicians={technicians}
                  teams={teams}
                  prefilledData={prefilledData}
                />
              </DialogContent>
            </Dialog>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4">
          {filteredAppointments.map((appointment: Appointment) => {
            const client = getClient(appointment.clientId);
            const service = getService(appointment.serviceId);
            const responsible = getResponsibleInfo(appointment);
            const { date, time } = formatDateTime(appointment.scheduledDate.toString());

            return (
              <Card key={appointment.id} className="hover:shadow-md transition-shadow">
                <CardContent className="p-6">
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-3">
                        <h3 className="text-lg font-semibold text-gray-900">
                          {client?.name || "Cliente n√£o encontrado"}
                        </h3>
                        <Badge className={getStatusColor(appointment.status)}>
                          {getStatusText(appointment.status)}
                        </Badge>
                        <Badge className={getPriorityColor(appointment.priority)}>
                          {getPriorityText(appointment.priority)}
                        </Badge>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600">
                        <div className="flex items-center space-x-2">
                          <Calendar className="h-4 w-4" />
                          <span>{date} √†s {time}</span>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <User className="h-4 w-4" />
                          <span>{responsible.displayName}</span>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <MapPin className="h-4 w-4" />
                          <span>
                            {client
                              ? (
                                  <>
                                    {client.logradouro || "Logradouro n√£o informado"}
                                    {client.numero ? `, ${client.numero}` : ""}
                                    {client.complemento ? `, ${client.complemento}` : ""}
                                    {client.bairro ? `, ${client.bairro}` : ""}
                                    {client.cidade ? `, ${client.cidade}` : ""}
                                    {client.cep ? ` - ${client.cep}` : ""}
                                  </>
                                )
                              : <span style={{ color: "red" }}>Cliente n√£o encontrado</span>
                            }
                          </span>
                        </div>
                        
                        <div className="flex items-center space-x-2">
                          <Clock className="h-4 w-4" />
                          <span>{service?.name || "Servi√ßo n√£o encontrado"}</span>
                        </div>
                      </div>
                      
                      {appointment.notes && (
                        <div className="mt-3 p-3 bg-gray-50 rounded-lg">
                          <p className="text-sm text-gray-700">{appointment.notes}</p>
                        </div>
                      )}
                    </div>
                    
                    <div className="flex space-x-2 ml-4">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEdit(appointment)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDelete(appointment)}
                        className="text-red-600 hover:text-red-700 hover:border-red-300"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>
      )}
    </div>
  );
}
